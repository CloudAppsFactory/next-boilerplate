{"ast":null,"code":"// #region Local Imports\nimport { Http } from \"@Services\"; // #endregion Local Imports\n// #region Interface Imports\n\n// #endregion Interface Imports\nexport const PlanetaryService = {\n  GetPlanetImage: async (payload) => {\n    let response;\n\n    try {\n      response = await Http.Request(\"GET\", \"/planetary/apod\", payload.params);\n    } catch (error) {\n      response = {\n        copyright: \"\",\n        date: \"\",\n        explanation: \"\",\n        hdurl: \"\",\n        service_version: \"\",\n        title: \"\",\n        url: \"\"\n      };\n    }\n\n    return response;\n  }\n};","map":{"version":3,"sources":["F:/MY_GIT/next-boilerplate/src/Services/API/Planetary/index.ts"],"names":["Http","PlanetaryService","GetPlanetImage","payload","response","Request","params","error","copyright","date","explanation","hdurl","service_version","title","url"],"mappings":"AAAA;AACA,SAASA,IAAT,QAAqB,WAArB,C,CACA;AAEA;;AAEA;AAEA,OAAO,MAAMC,gBAAgB,GAAG;AAC5BC,EAAAA,cAAc,EAAE,OACZC,OADY,KAE8B;AAC1C,QAAIC,QAAJ;;AAEA,QAAI;AACAA,MAAAA,QAAQ,GAAG,MAAMJ,IAAI,CAACK,OAAL,CACb,KADa,EAEb,iBAFa,EAGbF,OAAO,CAACG,MAHK,CAAjB;AAKH,KAND,CAME,OAAOC,KAAP,EAAc;AACZH,MAAAA,QAAQ,GAAG;AACPI,QAAAA,SAAS,EAAE,EADJ;AAEPC,QAAAA,IAAI,EAAE,EAFC;AAGPC,QAAAA,WAAW,EAAE,EAHN;AAIPC,QAAAA,KAAK,EAAE,EAJA;AAKPC,QAAAA,eAAe,EAAE,EALV;AAMPC,QAAAA,KAAK,EAAE,EANA;AAOPC,QAAAA,GAAG,EAAE;AAPE,OAAX;AASH;;AAED,WAAOV,QAAP;AACH;AAzB2B,CAAzB","sourcesContent":["// #region Local Imports\r\nimport { Http } from \"@Services\";\r\n// #endregion Local Imports\r\n\r\n// #region Interface Imports\r\nimport { PlanetaryModel } from \"@Interfaces\";\r\n// #endregion Interface Imports\r\n\r\nexport const PlanetaryService = {\r\n    GetPlanetImage: async (\r\n        payload: PlanetaryModel.GetApodPayload\r\n    ): Promise<PlanetaryModel.GetApodResponse> => {\r\n        let response: PlanetaryModel.GetApodResponse;\r\n\r\n        try {\r\n            response = await Http.Request<PlanetaryModel.GetApodResponse>(\r\n                \"GET\",\r\n                \"/planetary/apod\",\r\n                payload.params\r\n            );\r\n        } catch (error) {\r\n            response = {\r\n                copyright: \"\",\r\n                date: \"\",\r\n                explanation: \"\",\r\n                hdurl: \"\",\r\n                service_version: \"\",\r\n                title: \"\",\r\n                url: \"\",\r\n            };\r\n        }\r\n\r\n        return response;\r\n    },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}