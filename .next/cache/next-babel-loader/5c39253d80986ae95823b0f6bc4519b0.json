{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n// #region Local Imports\nimport { Http } from \"@Services\"; // #endregion Local Imports\n// #region Interface Imports\n\n// #endregion Interface Imports\nexport var PlanetaryService = {\n  GetPlanetImage: function () {\n    var _GetPlanetImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(payload) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return Http.Request(\"GET\", \"/planetary/apod\", payload.params);\n\n            case 3:\n              response = _context.sent;\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              response = {\n                copyright: \"\",\n                date: \"\",\n                explanation: \"\",\n                hdurl: \"\",\n                service_version: \"\",\n                title: \"\",\n                url: \"\"\n              };\n\n            case 9:\n              return _context.abrupt(\"return\", response);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 6]]);\n    }));\n\n    function GetPlanetImage(_x) {\n      return _GetPlanetImage.apply(this, arguments);\n    }\n\n    return GetPlanetImage;\n  }()\n};","map":{"version":3,"sources":["F:/MY_GIT/next-boilerplate/src/Services/API/Planetary/index.ts"],"names":["Http","PlanetaryService","GetPlanetImage","payload","Request","params","response","copyright","date","explanation","hdurl","service_version","title","url"],"mappings":";;AAAA;AACA,SAASA,IAAT,QAAqB,WAArB,C,CACA;AAEA;;AAEA;AAEA,OAAO,IAAMC,gBAAgB,GAAG;AAC5BC,EAAAA,cAAc;AAAA,mFAAE,iBACZC,OADY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAMSH,IAAI,CAACI,OAAL,CACb,KADa,EAEb,iBAFa,EAGbD,OAAO,CAACE,MAHK,CANT;;AAAA;AAMRC,cAAAA,QANQ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYRA,cAAAA,QAAQ,GAAG;AACPC,gBAAAA,SAAS,EAAE,EADJ;AAEPC,gBAAAA,IAAI,EAAE,EAFC;AAGPC,gBAAAA,WAAW,EAAE,EAHN;AAIPC,gBAAAA,KAAK,EAAE,EAJA;AAKPC,gBAAAA,eAAe,EAAE,EALV;AAMPC,gBAAAA,KAAK,EAAE,EANA;AAOPC,gBAAAA,GAAG,EAAE;AAPE,eAAX;;AAZQ;AAAA,+CAuBLP,QAvBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADc,CAAzB","sourcesContent":["// #region Local Imports\r\nimport { Http } from \"@Services\";\r\n// #endregion Local Imports\r\n\r\n// #region Interface Imports\r\nimport { PlanetaryModel } from \"@Interfaces\";\r\n// #endregion Interface Imports\r\n\r\nexport const PlanetaryService = {\r\n    GetPlanetImage: async (\r\n        payload: PlanetaryModel.GetApodPayload\r\n    ): Promise<PlanetaryModel.GetApodResponse> => {\r\n        let response: PlanetaryModel.GetApodResponse;\r\n\r\n        try {\r\n            response = await Http.Request<PlanetaryModel.GetApodResponse>(\r\n                \"GET\",\r\n                \"/planetary/apod\",\r\n                payload.params\r\n            );\r\n        } catch (error) {\r\n            response = {\r\n                copyright: \"\",\r\n                date: \"\",\r\n                explanation: \"\",\r\n                hdurl: \"\",\r\n                service_version: \"\",\r\n                title: \"\",\r\n                url: \"\",\r\n            };\r\n        }\r\n\r\n        return response;\r\n    },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}